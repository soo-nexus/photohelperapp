// generateMarkerImages.js
// Generates a TypeScript file that maps local image folders to React Native-compatible `require()` calls.

const fs = require("fs");
const path = require("path");

const baseDir = path.join(__dirname, "assets");
const outputFile = path.join(__dirname, "markerImages.ts");

// Acceptable image file extensions
const validExtensions = [".jpg", ".jpeg", ".png", ".webp"];

function generate() {
  const result = {};

  const schools = fs.readdirSync(baseDir);
  for (const school of schools) {
    const schoolPath = path.join(baseDir, school);
    if (!fs.statSync(schoolPath).isDirectory()) continue;

    const markers = fs.readdirSync(schoolPath);
    for (const marker of markers) {
      const markerPath = path.join(schoolPath, marker);
      if (!fs.statSync(markerPath).isDirectory()) continue;

      const images = fs
        .readdirSync(markerPath)
        .filter((file) =>
          validExtensions.includes(path.extname(file).toLowerCase())
        )
        .map((file) => {
          const relativePath = `../assets/${school}/${marker}/${file}`;
          return `require("${relativePath}")`;
        });

      if (!result[school]) result[school] = {};
      result[school][marker] = images;
    }
  }

  let content = "// Auto-generated by generateMarkerImages.js\n";
  content += "export const markerImages = {\n";

  for (const [school, markers] of Object.entries(result)) {
    content += `  "${school}": {\n`;
    for (const [marker, images] of Object.entries(markers)) {
      content += `    "${marker}": [\n      ${images.join(
        ",\n      "
      )}\n    ],\n`;
    }
    content += "  },\n";
  }

  content += "};\n";

  fs.writeFileSync(outputFile, content);
  console.log(`âœ… markerImages.ts generated at ${outputFile}`);
}

generate();
