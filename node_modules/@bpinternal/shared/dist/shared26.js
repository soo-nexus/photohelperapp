const y = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December"
], h = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
], l = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
function w(e) {
  switch (e) {
    case "narrow":
      return [...l];
    case "short":
      return [...h];
    case "long":
      return [...y];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    default:
      return null;
  }
}
const f = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday"
], M = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], S = ["M", "T", "W", "T", "F", "S", "S"];
function g(e) {
  switch (e) {
    case "narrow":
      return [...S];
    case "short":
      return [...M];
    case "long":
      return [...f];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];
    default:
      return null;
  }
}
const T = ["AM", "PM"], A = ["Before Christ", "Anno Domini"], D = ["BC", "AD"], F = ["B", "A"];
function b(e) {
  switch (e) {
    case "narrow":
      return [...F];
    case "short":
      return [...D];
    case "long":
      return [...A];
    default:
      return null;
  }
}
function k(e) {
  return T[e.hour < 12 ? 0 : 1];
}
function J(e, r) {
  return g(r)[e.weekday - 1];
}
function $(e, r) {
  return w(r)[e.month - 1];
}
function N(e, r) {
  return b(r)[e.year < 0 ? 0 : 1];
}
function p(e, r, c = "always", i = !1) {
  const t = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."]
  }, d = ["hours", "minutes", "seconds"].indexOf(e) === -1;
  if (c === "auto" && d) {
    const a = e === "days";
    switch (r) {
      case 1:
        return a ? "tomorrow" : `next ${t[e][0]}`;
      case -1:
        return a ? "yesterday" : `last ${t[e][0]}`;
      case 0:
        return a ? "today" : `this ${t[e][0]}`;
    }
  }
  const m = Object.is(r, -0) || r < 0, n = Math.abs(r), o = n === 1, s = t[e], u = i ? o ? s[1] : s[2] || s[1] : o ? t[e][0] : e;
  return m ? `${n} ${u} ago` : `in ${n} ${u}`;
}
export {
  N as eraForDateTime,
  b as eras,
  A as erasLong,
  F as erasNarrow,
  D as erasShort,
  p as formatRelativeTime,
  k as meridiemForDateTime,
  T as meridiems,
  $ as monthForDateTime,
  w as months,
  y as monthsLong,
  l as monthsNarrow,
  h as monthsShort,
  J as weekdayForDateTime,
  g as weekdays,
  f as weekdaysLong,
  S as weekdaysNarrow,
  M as weekdaysShort
};
