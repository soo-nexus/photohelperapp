import { InvalidArgumentError as d } from "./shared20.js";
function a(n) {
  return typeof n > "u";
}
function $(n) {
  return typeof n == "number";
}
function m(n) {
  return typeof n == "number" && n % 1 === 0;
}
function g(n) {
  return typeof n == "string";
}
function N(n) {
  return Object.prototype.toString.call(n) === "[object Date]";
}
function w() {
  try {
    return typeof Intl < "u" && !!Intl.RelativeTimeFormat;
  } catch {
    return !1;
  }
}
function O(n) {
  return Array.isArray(n) ? n : [n];
}
function T(n, e, t) {
  if (n.length !== 0)
    return n.reduce((r, o) => {
      const u = [e(o), o];
      return r && t(r[0], u[0]) === r[0] ? r : u;
    }, null)[1];
}
function p(n, e) {
  return e.reduce((t, r) => (t[r] = n[r], t), {});
}
function h(n, e) {
  return Object.prototype.hasOwnProperty.call(n, e);
}
function A(n, e, t) {
  return m(n) && n >= e && n <= t;
}
function y(n, e) {
  return n - e * Math.floor(n / e);
}
function i(n, e = 2) {
  const t = n < 0;
  let r;
  return t ? r = "-" + ("" + -n).padStart(e, "0") : r = ("" + n).padStart(e, "0"), r;
}
function F(n) {
  if (!(a(n) || n === null || n === ""))
    return parseInt(n, 10);
}
function S(n) {
  if (!(a(n) || n === null || n === ""))
    return parseFloat(n);
}
function b(n) {
  if (!(a(n) || n === null || n === "")) {
    const e = parseFloat("0." + n) * 1e3;
    return Math.floor(e);
  }
}
function z(n, e, t = !1) {
  const r = 10 ** e;
  return (t ? Math.trunc : Math.round)(n * r) / r;
}
function c(n) {
  return n % 4 === 0 && (n % 100 !== 0 || n % 400 === 0);
}
function D(n) {
  return c(n) ? 366 : 365;
}
function C(n, e) {
  const t = y(e - 1, 12) + 1, r = n + (e - t) / 12;
  return t === 2 ? c(r) ? 29 : 28 : [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][t - 1];
}
function Z(n) {
  let e = Date.UTC(
    n.year,
    n.month - 1,
    n.day,
    n.hour,
    n.minute,
    n.second,
    n.millisecond
  );
  return n.year < 100 && n.year >= 0 && (e = new Date(e), e.setUTCFullYear(e.getUTCFullYear() - 1900)), +e;
}
function v(n) {
  const e = (n + Math.floor(n / 4) - Math.floor(n / 100) + Math.floor(n / 400)) % 7, t = n - 1, r = (t + Math.floor(t / 4) - Math.floor(t / 100) + Math.floor(t / 400)) % 7;
  return e === 4 || r === 3 ? 53 : 52;
}
function R(n) {
  return n > 99 ? n : n > 60 ? 1900 + n : 2e3 + n;
}
function U(n, e, t, r = null) {
  const o = new Date(n), u = {
    hourCycle: "h23",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  };
  r && (u.timeZone = r);
  const l = { timeZoneName: e, ...u }, f = new Intl.DateTimeFormat(t, l).formatToParts(o).find((s) => s.type.toLowerCase() === "timezonename");
  return f ? f.value : null;
}
function L(n, e) {
  let t = parseInt(n, 10);
  Number.isNaN(t) && (t = 0);
  const r = parseInt(e, 10) || 0, o = t < 0 || Object.is(t, -0) ? -r : r;
  return t * 60 + o;
}
function M(n) {
  const e = Number(n);
  if (typeof n == "boolean" || n === "" || Number.isNaN(e))
    throw new d(`Invalid unit value ${n}`);
  return e;
}
function P(n, e) {
  const t = {};
  for (const r in n)
    if (h(n, r)) {
      const o = n[r];
      if (o == null) continue;
      t[e(r)] = M(o);
    }
  return t;
}
function Y(n, e) {
  const t = Math.trunc(Math.abs(n / 60)), r = Math.trunc(Math.abs(n % 60)), o = n >= 0 ? "+" : "-";
  switch (e) {
    case "short":
      return `${o}${i(t, 2)}:${i(r, 2)}`;
    case "narrow":
      return `${o}${t}${r > 0 ? `:${r}` : ""}`;
    case "techie":
      return `${o}${i(t, 2)}${i(r, 2)}`;
    default:
      throw new RangeError(`Value format ${e} is out of range for property format`);
  }
}
function _(n) {
  return p(n, ["hour", "minute", "second", "millisecond"]);
}
const B = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
export {
  M as asNumber,
  T as bestBy,
  C as daysInMonth,
  D as daysInYear,
  y as floorMod,
  Y as formatOffset,
  h as hasOwnProperty,
  w as hasRelative,
  B as ianaRegex,
  A as integerBetween,
  N as isDate,
  m as isInteger,
  c as isLeapYear,
  $ as isNumber,
  g as isString,
  a as isUndefined,
  O as maybeArray,
  P as normalizeObject,
  Z as objToLocalTS,
  i as padStart,
  S as parseFloating,
  F as parseInteger,
  b as parseMillis,
  U as parseZoneInfo,
  p as pick,
  z as roundTo,
  L as signedOffset,
  _ as timeObject,
  R as untruncateYear,
  v as weeksInWeekYear
};
