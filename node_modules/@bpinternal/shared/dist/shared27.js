const t = {
  arab: "[٠-٩]",
  arabext: "[۰-۹]",
  bali: "[᭐-᭙]",
  beng: "[০-৯]",
  deva: "[०-९]",
  fullwide: "[０-９]",
  gujr: "[૦-૯]",
  hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
  khmr: "[០-៩]",
  knda: "[೦-೯]",
  laoo: "[໐-໙]",
  limb: "[᥆-᥏]",
  mlym: "[൦-൯]",
  mong: "[᠐-᠙]",
  mymr: "[၀-၉]",
  orya: "[୦-୯]",
  tamldec: "[௦-௯]",
  telu: "[౦-౯]",
  thai: "[๐-๙]",
  tibt: "[༠-༩]",
  latn: "\\d"
}, l = {
  arab: [1632, 1641],
  arabext: [1776, 1785],
  bali: [6992, 7001],
  beng: [2534, 2543],
  deva: [2406, 2415],
  fullwide: [65296, 65303],
  gujr: [2790, 2799],
  khmr: [6112, 6121],
  knda: [3302, 3311],
  laoo: [3792, 3801],
  limb: [6470, 6479],
  mlym: [3430, 3439],
  mong: [6160, 6169],
  mymr: [4160, 4169],
  orya: [2918, 2927],
  tamldec: [3046, 3055],
  telu: [3174, 3183],
  thai: [3664, 3673],
  tibt: [3872, 3881]
}, o = /* @__PURE__ */ t.hanidec.replace(/[\[|\]]/g, "").split("");
function c(e) {
  let u = parseInt(e, 10);
  if (isNaN(u)) {
    u = "";
    for (let a = 0; a < e.length; a++) {
      const n = e.charCodeAt(a);
      if (e[a].search(t.hanidec) !== -1)
        u += o.indexOf(e[a]);
      else
        for (const r in l) {
          const [i, m] = l[r];
          n >= i && n <= m && (u += n - i);
        }
    }
    return parseInt(u, 10);
  } else
    return u;
}
function F({ numberingSystem: e }, u = "") {
  return new RegExp(`${t[e || "latn"]}${u}`);
}
export {
  F as digitRegex,
  c as parseDigits
};
