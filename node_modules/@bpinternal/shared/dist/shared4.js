var y;
function g(n) {
  return y == null ? void 0 : y.get(n);
}
var a;
function m(n) {
  return a == null ? void 0 : a.get(n);
}
var b;
function k(n, u) {
  var e;
  return (e = b == null ? void 0 : b.get(n)) == null ? void 0 : e.get(u);
}
function v(n) {
  var e, r;
  const u = typeof n;
  return u === "string" ? `"${n}"` : u === "number" || u === "bigint" || u === "boolean" ? `${n}` : u === "object" || u === "function" ? (n && ((r = (e = Object.getPrototypeOf(n)) == null ? void 0 : e.constructor) == null ? void 0 : r.name)) ?? "null" : u;
}
function o(n, u, e, r, i) {
  const f = e.value, t = n.expects ?? null, c = v(f), s = {
    kind: n.kind,
    type: n.type,
    input: f,
    expected: t,
    received: c,
    message: `Invalid ${u}: ${t ? `Expected ${t} but r` : "R"}eceived ${c}`,
    requirement: n.requirement,
    path: i == null ? void 0 : i.path,
    issues: i == null ? void 0 : i.issues,
    lang: r.lang,
    abortEarly: r.abortEarly,
    abortPipeEarly: r.abortPipeEarly
  }, p = n.kind === "schema", l = n.message ?? k(n.reference, s.lang) ?? (p ? m(s.lang) : null) ?? r.message ?? g(s.lang);
  l && (s.message = typeof l == "function" ? (
    // @ts-expect-error
    l(s)
  ) : l), p && (e.typed = !1), e.issues ? e.issues.push(s) : e.issues = [s];
}
function h(n, u) {
  const e = [...new Set(n)];
  return e.length > 1 ? `(${e.join(` ${u} `)})` : e[0] ?? "never";
}
function _(n, u, e) {
  return typeof n.fallback == "function" ? (
    // @ts-expect-error
    n.fallback(u, e)
  ) : (
    // @ts-expect-error
    n.fallback
  );
}
function I(n, u) {
  return {
    ...n,
    fallback: u,
    _run(e, r) {
      const i = n._run(e, r);
      return i.issues ? { typed: !0, value: _(this, i, r) } : i;
    }
  };
}
function j(n, u, e) {
  return typeof n.default == "function" ? (
    // @ts-expect-error
    n.default(u, e)
  ) : (
    // @ts-expect-error
    n.default
  );
}
function $(n) {
  return {
    kind: "schema",
    type: "boolean",
    reference: $,
    expects: "boolean",
    async: !1,
    message: n,
    _run(u, e) {
      return typeof u.value == "boolean" ? u.typed = !0 : o(this, "type", u, e), u;
    }
  };
}
function E(n) {
  return {
    kind: "schema",
    type: "number",
    reference: E,
    expects: "number",
    async: !1,
    message: n,
    _run(u, e) {
      return typeof u.value == "number" && !isNaN(u.value) ? u.typed = !0 : o(this, "type", u, e), u;
    }
  };
}
function d(n, u) {
  return {
    kind: "schema",
    type: "object",
    reference: d,
    expects: "Object",
    async: !1,
    entries: n,
    message: u,
    _run(e, r) {
      var f;
      const i = e.value;
      if (i && typeof i == "object") {
        e.typed = !0, e.value = {};
        for (const t in this.entries) {
          const c = i[t], s = this.entries[t]._run(
            { typed: !1, value: c },
            r
          );
          if (s.issues) {
            const p = {
              type: "object",
              origin: "value",
              input: i,
              key: t,
              value: c
            };
            for (const l of s.issues)
              l.path ? l.path.unshift(p) : l.path = [p], (f = e.issues) == null || f.push(l);
            if (e.issues || (e.issues = s.issues), r.abortEarly) {
              e.typed = !1;
              break;
            }
          }
          s.typed || (e.typed = !1), (s.value !== void 0 || t in i) && (e.value[t] = s.value);
        }
      } else
        o(this, "type", e, r);
      return e;
    }
  };
}
function x(n, ...u) {
  const e = {
    kind: "schema",
    type: "optional",
    reference: x,
    expects: `(${n.expects} | undefined)`,
    async: !1,
    wrapped: n,
    _run(r, i) {
      return r.value === void 0 && ("default" in this && (r.value = j(
        this,
        r,
        i
      )), r.value === void 0) ? (r.typed = !0, r) : this.wrapped._run(r, i);
    }
  };
  return 0 in u && (e.default = u[0]), e;
}
function S(n, u) {
  return {
    kind: "schema",
    type: "picklist",
    reference: S,
    expects: h(n.map(v), "|"),
    async: !1,
    options: n,
    message: u,
    _run(e, r) {
      return this.options.includes(e.value) ? e.typed = !0 : o(this, "type", e, r), e;
    }
  };
}
function D(n) {
  return {
    kind: "schema",
    type: "string",
    reference: D,
    expects: "string",
    async: !1,
    message: n,
    _run(u, e) {
      return typeof u.value == "string" ? u.typed = !0 : o(this, "type", u, e), u;
    }
  };
}
export {
  o as _addIssue,
  h as _joinExpects,
  v as _stringify,
  $ as boolean,
  I as fallback,
  j as getDefault,
  _ as getFallback,
  g as getGlobalMessage,
  m as getSchemaMessage,
  k as getSpecificMessage,
  E as number,
  d as object,
  x as optional,
  S as picklist,
  D as string
};
